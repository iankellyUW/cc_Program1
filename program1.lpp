%{
using std::string;
using std::cerr;

#include "program1.hpp"
/*
 * the noyywrap is how the scanner handles end of file, now it will just
 * quit. 
 * get the line numbers from the scanner because of yylineno
 */
%}
%option outfile="program1_lex.cpp"
%option noyywrap
%option yylineno

/*
* DO NOT define 945  different regular expressions. You do NOT need most of
* them. Notice that I put them in as simple rules. Eventually you will need
* to separate ALL those fancy expressions into single simple rules anyway so
* why not start now. 
*/

%%
quit            {
                  return 0;
                }
Quit            {
                  return 0;
                }
QUIT            {
                  return 0;
                }
  /*
   * Numbers. 
   */
[0-9]+          {
                  value="Numb: ";
                  return 8;
                }
  /*
   * Whitespace: tab, space, newline.
   */
\t              { 
                  // do nothing ignore it
                }

\n              {
                  return 11;
                }
" "+            { 
                  // do nothing ignore it
                }

"=="            {
                    value="compare_op: ";
                    return 1;
                }

">"             {
                    value="compare_op: ";
                    return 1;
                }

"<"             {
                    value="compare_op: ";
                    return 1;
                }

">="           {
                    value="compare_op: ";
                    return 1;
                }

"<="            {
                    value="compare_op: ";
                    return 1;
                }

"!="            {
                    value="compare_op: ";
                    return 1;
                }

"||"            {
                    return 2;
                }

"&&"            {
                    return 2;
                }
"+"             {
                    return 3;
                }
"-"             {
                    return 3;
                }
"*"             {
                    return 3;
                }
"/"             {
                    return 3;
                }
[{}]            {
                    return 4;
                }
[[]             {
                    return 4;
                }
[]]            {
                    return 4;
                }
[()]            {
                    return 4;
                }

"\."            {
                    return 5;
                }
","             {
                    return 5;
                }
";"             {
                    return 5;
                }

this            {
                    return 6;
                }
if              {
                    return 6;
                }
else            {
                    return 6;
                }
while           {
                    return 6;
                }

(_[A-Z]*[a-z]*[0-9]*)+  {
                    return 7;
                }

[0-9]+(\.)[0-9]+  {
                    return 9;
                }
[0-9]+\.[0-9]+[Ee]\-?\+?[0-9]+ {
                    return 9;
                }
[0-9]+[Ee]\-?\+?[0-9]+ {
                    return 9;
                }


  /*
   * Matches anything not matched. MUST BE LAST RULE.
   */
.               {
                  value="Unk : ";
                  return 1;
                }
%%